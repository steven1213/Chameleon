package com.steven.chameleon.core.connection;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * <template>desc<template>.
 *
 * @author: steven
 * @date: 2024/11/14 17:01
 */
public class PooledConnection implements Connection {
    private final Connection realConnection;
    private final ConnectionPool pool;
    private volatile boolean isClosed = false;

    public PooledConnection(Connection realConnection, ConnectionPool pool) {
        this.realConnection = realConnection;
        this.pool = pool;
    }

    // 基本连接管理
    @Override
    public void close() throws SQLException {
        if (!isClosed) {
            pool.release(this);
        }
    }

    public void reallyClose() throws SQLException {
        isClosed = true;
        realConnection.close();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return isClosed;
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        checkClosed();
        return realConnection.isValid(timeout);
    }

    // Statement 创建方法
    @Override
    public Statement createStatement() throws SQLException {
        checkClosed();
        return realConnection.createStatement();
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency)
            throws SQLException {
        checkClosed();
        return realConnection.createStatement(resultSetType, resultSetConcurrency);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency,
                                     int resultSetHoldability) throws SQLException {
        checkClosed();
        return realConnection.createStatement(resultSetType, resultSetConcurrency,
                resultSetHoldability);
    }

    // PreparedStatement 方法
    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        checkClosed();
        return realConnection.prepareStatement(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency) throws SQLException {
        checkClosed();
        return realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        checkClosed();
        return realConnection.prepareStatement(sql, resultSetType,
                resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        checkClosed();
        return realConnection.prepareStatement(sql, autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        checkClosed();
        return realConnection.prepareStatement(sql, columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        checkClosed();
        return realConnection.prepareStatement(sql, columnNames);
    }

    // CallableStatement 方法
    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        checkClosed();
        return realConnection.prepareCall(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType,
                                         int resultSetConcurrency) throws SQLException {
        checkClosed();
        return realConnection.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType,
                                         int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        checkClosed();
        return realConnection.prepareCall(sql, resultSetType, resultSetConcurrency,
                resultSetHoldability);
    }

    // 事务管理
    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        checkClosed();
        realConnection.setAutoCommit(autoCommit);
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        checkClosed();
        return realConnection.getAutoCommit();
    }

    @Override
    public void commit() throws SQLException {
        checkClosed();
        realConnection.commit();
    }

    @Override
    public void rollback() throws SQLException {
        checkClosed();
        realConnection.rollback();
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        checkClosed();
        realConnection.rollback(savepoint);
    }

    // 保存点管理
    @Override
    public Savepoint setSavepoint() throws SQLException {
        checkClosed();
        return realConnection.setSavepoint();
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        checkClosed();
        return realConnection.setSavepoint(name);
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        checkClosed();
        realConnection.releaseSavepoint(savepoint);
    }

    // 连接属性
    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        checkClosed();
        realConnection.setTransactionIsolation(level);
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        checkClosed();
        return realConnection.getTransactionIsolation();
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        checkClosed();
        realConnection.setReadOnly(readOnly);
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        checkClosed();
        return realConnection.isReadOnly();
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
        checkClosed();
        realConnection.setCatalog(catalog);
    }

    @Override
    public String getCatalog() throws SQLException {
        checkClosed();
        return realConnection.getCatalog();
    }

    @Override
    public void setSchema(String schema) throws SQLException {
        checkClosed();
        realConnection.setSchema(schema);
    }

    @Override
    public String getSchema() throws SQLException {
        checkClosed();
        return realConnection.getSchema();
    }

    // 大对象处理
    @Override
    public Blob createBlob() throws SQLException {
        checkClosed();
        return realConnection.createBlob();
    }

    @Override
    public Clob createClob() throws SQLException {
        checkClosed();
        return realConnection.createClob();
    }

    @Override
    public NClob createNClob() throws SQLException {
        checkClosed();
        return realConnection.createNClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        checkClosed();
        return realConnection.createSQLXML();
    }

    // 数组和结构体
    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        checkClosed();
        return realConnection.createArrayOf(typeName, elements);
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        checkClosed();
        return realConnection.createStruct(typeName, attributes);
    }

    // 客户端信息
    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        try {
            checkClosed();
            realConnection.setClientInfo(name, value);
        } catch (SQLException e) {
            throw new SQLClientInfoException();
        }
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        try {
            checkClosed();
            realConnection.setClientInfo(properties);
        } catch (SQLException e) {
            throw new SQLClientInfoException();
        }
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        checkClosed();
        return realConnection.getClientInfo(name);
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        checkClosed();
        return realConnection.getClientInfo();
    }

    // 元数据
    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        checkClosed();
        return realConnection.getMetaData();
    }

    // 警告处理
    @Override
    public SQLWarning getWarnings() throws SQLException {
        checkClosed();
        return realConnection.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        checkClosed();
        realConnection.clearWarnings();
    }

    // 类型映射
    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        checkClosed();
        realConnection.setTypeMap(map);
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        checkClosed();
        return realConnection.getTypeMap();
    }

    // 网络超时
    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds)
            throws SQLException {
        checkClosed();
        realConnection.setNetworkTimeout(executor, milliseconds);
    }

    @Override
    public int getNetworkTimeout() throws SQLException {
        checkClosed();
        return realConnection.getNetworkTimeout();
    }

    // 可保持性
    @Override
    public void setHoldability(int holdability) throws SQLException {
        checkClosed();
        realConnection.setHoldability(holdability);
    }

    @Override
    public int getHoldability() throws SQLException {
        checkClosed();
        return realConnection.getHoldability();
    }

    // 本地SQL
    @Override
    public String nativeSQL(String sql) throws SQLException {
        checkClosed();
        return realConnection.nativeSQL(sql);
    }

    // 包装器方法
    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        checkClosed();
        return realConnection.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        checkClosed();
        return realConnection.isWrapperFor(iface);
    }

    // 中止方法
    @Override
    public void abort(Executor executor) throws SQLException {
        realConnection.abort(executor);
        isClosed = true;
    }

    // 辅助方法
    private void checkClosed() throws SQLException {
        if (isClosed) {
            throw new SQLException("Connection is closed");
        }
    }

    // 获取实际连接
    public Connection getRealConnection() {
        return realConnection;
    }

    // 获取连接池
    public ConnectionPool getPool() {
        return pool;
    }
}
